#include <WiFi.h>
#include <esp_now.h>

// Structure to send data
typedef struct struct_message {
  int sender_id;
  float value;
} struct_message;

// Create a struct_message to hold sensor data
struct_message outgoingMessage;

// Receiver's MAC address (Replace with your Receiver's MAC Address)
uint8_t receiverAddress[] = {0xE4, 0x65, 0xB8, 0x71, 0xA6, 0x10}; // Example only. Update this!

// PIR Sensor Pin
const int sensorPin = 2;

// LED Pin
const int ledPin = 13;

// Variables to track sensor state
int sensorState = LOW;
int lastSensorState = LOW;

// Callback function when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Last Packet Send Status: ");
  if (status == ESP_NOW_SEND_SUCCESS) {
    Serial.println("Delivery Success");
  } else {
    Serial.println("Delivery Fail");
  }
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  Serial.println("ESP32 Sender Starting...");

  // Initialize LED pin
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Ensure LED is off initially

  // Initialize PIR sensor pin
  pinMode(sensorPin, INPUT);

  // Initialize WiFi in Station mode
  WiFi.mode(WIFI_STA);
  Serial.println("ESP-NOW Sender");

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    while (true) {
      delay(1000);
    }
  }
  Serial.println("ESP-NOW Initialized");

  // Register the send callback
  esp_now_register_send_cb(OnDataSent);

  // Define the peer (Receiver)
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, receiverAddress, 6);
  peerInfo.channel = 1; // Use the current channel
  peerInfo.encrypt = false;

  // Add the peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    while (true) {
      delay(1000);
    }
  }
  Serial.println("Peer Added Successfully");
}

void loop() {
  // Read the current state of the PIR sensor
  sensorState = digitalRead(sensorPin);

  // Check for state change
  if (sensorState != lastSensorState) {
    if (sensorState == HIGH) {
      // Motion detected
      digitalWrite(ledPin, HIGH);
      Serial.println("Motion detected!");

      // Prepare the message
      outgoingMessage.sender_id = 1;    // Sender ID for PIR Sensor
      outgoingMessage.value = 1.0;      // Increment value

      // Send the message via ESP-NOW
      esp_err_t result = esp_now_send(receiverAddress, (uint8_t *) &outgoingMessage, sizeof(outgoingMessage));

      if (result == ESP_OK) {
        Serial.println("Sent with success");
      } else {
        Serial.println("Error sending the data");
      }
    } else {
      // Motion stopped
      digitalWrite(ledPin, LOW);
      Serial.println("Motion stopped!");

      // Optional: Send a message when motion stops
      // If Receiver needs to handle motion stopped, you can define a different sender_id or value
      // For example:
      /*
      outgoingMessage.sender_id = 1;    // Same Sender ID for PIR Sensor
      outgoingMessage.value = 0.0;      // Indicate motion stopped
      esp_now_send(receiverAddress, (uint8_t *) &outgoingMessage, sizeof(outgoingMessage));
      */
    }

    // Update the last sensor state
    lastSensorState = sensorState;
  }

  // Small delay to debounce sensor
  delay(100);
}
