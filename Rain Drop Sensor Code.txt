#include <WiFi.h>
#include <esp_now.h>

// Structure to send data
typedef struct struct_message {
  int sender_id;
  float value;
} struct_message;

// Create a struct_message to hold sensor data
struct_message myData;

// Receiver MAC Address (replace with your receiver's MAC)
uint8_t receiverAddress[] = {0xE4, 0x65, 0xB8, 0x71, 0xA6, 0x10}; // Replace with Receiver MAC

// Raindrop Sensor Pin
const int rainPin = 34; // ADC1_6

// Send callback to confirm data transmission
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Last Packet Send Status: ");
  if (status == ESP_NOW_SEND_SUCCESS) {
    Serial.println("Delivery Success");
  }
  else {
    Serial.println("Delivery Fail");
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("Raindrop Sensor Sender Initialized...");

  // Initialize Raindrop Sensor
  pinMode(rainPin, INPUT);

  // Initialize Wi-Fi in Station mode
  WiFi.mode(WIFI_STA);
  Serial.println("ESP-NOW Sender Mode");

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register send callback
  esp_now_register_send_cb(OnDataSent);

  // Register peer (Receiver)
  esp_now_peer_info_t peerInfo;
  memset(&peerInfo, 0, sizeof(peerInfo));
  memcpy(peerInfo.peer_addr, receiverAddress, 6);
  peerInfo.channel = 1;  // Use current Wi-Fi channel
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add Receiver as peer");
    return;
  }

  Serial.println("Receiver peer added successfully");
}

void loop() {
  // Read analog value
  int analogValue = analogRead(rainPin);

  // Prepare data
  myData.sender_id = 2; // Sender ID for Raindrop Sensor
  myData.value = (float)analogValue;

  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(receiverAddress, (uint8_t *) &myData, sizeof(myData));

  if (result == ESP_OK) {
    Serial.printf("Sent Rain Analog Value: %d\n", analogValue);
  } else {
    Serial.println("Error sending the data");
  }

  delay(2000); // Send every 2 seconds
}