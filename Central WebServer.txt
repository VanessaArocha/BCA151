#include <WiFi.h>
#include <esp_now.h>
#include <WebServer.h>
#include <time.h>

// Structure to receive data
typedef struct struct_message {
  int sender_id;
  float value;
} struct_message;

WebServer server(80);

// Sensor data variables
int pirCount = 0;
String rainStatus = "No Data";
String waterLevelStatus = "No Data";

// NTP configuration
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 28800; // GMT +8 for Philippines
const int daylightOffset_sec = 0;

// Callback when data is received
void OnDataRecv(const esp_now_recv_info_t *recvInfo, const uint8_t *incomingData, int len) {
  struct_message incomingMessage;
  if (len < sizeof(incomingMessage)) {
    Serial.println("Received data is too short!");
    return;
  }

  memcpy(&incomingMessage, incomingData, sizeof(incomingMessage));

  switch (incomingMessage.sender_id) {
    case 1: // PIR Sensor
      pirCount += (int)incomingMessage.value;
      break;
    case 2: // Raindrop Sensor
    if (incomingMessage.value == 4095) {
    // Exactly 4095 means no rain
    rainStatus = "No Rain";
    } else if (incomingMessage.value <= 4095 && incomingMessage.value >= 2500) {
    // Values between 4094 and 3500 (inclusive) mean light rain
    rainStatus = "Light Rain";
    } else if (incomingMessage.value < 2500 && incomingMessage.value >= 0) {
    // Values between 3500 and 1 (inclusive) mean heavy rain
    rainStatus = "Heavy Rain";
    } else {
    // Handle any unexpected values if necessary
    rainStatus = "Unknown";
    }
    break;
    case 3: // Water Level Sensor
      if (incomingMessage.value < 300)
        waterLevelStatus = "Normal Level";
      else if (incomingMessage.value < 700)
        waterLevelStatus = "Medium Level";
      else
        waterLevelStatus = "High Level";
      break;
    default:
      Serial.println("Unknown sender ID!");
      break;
  }

  Serial.printf("Received data from sender %d: %f\n", incomingMessage.sender_id, incomingMessage.value);
}

// Updated HTML & CSS
const char* htmlPage = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>Sikyop Monitoring Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    body {
      background-image: url('https://raw.githubusercontent.com/vanessaAroch/-BackGround/d4267b7954678ef834b60b0c355a5726073ba7bf/ffg.jpg');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      background-attachment: fixed;
      font-family: Arial, sans-serif;
      color: #000;
    }
    .container {
      max-width: 1000px;
      margin-top: 0px; /* Removed top margin to move dashboard higher */
    }
    h1 {
      text-align: center;
      margin-bottom: 20px; /* Reduced to bring cards closer */
      color: #fff;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.7);
    }
    .card {
      margin: 20px;
      background-color: rgba(255, 255, 255, 0.9);
      border-radius: 8px;
      color: #000;
    }
    .card-title {
      color: #007BFF;
      text-shadow: none;
    }
    .card-text {
      font-size: 2em;
      font-weight: bold;
      text-shadow: none;
    }
    #clearButton {
      background-color: #dc3545;
      color: #fff;
    }
    footer {
      position: fixed;
      bottom: 10px;
      width: 100%;
      text-align: center;
      color: #fff;
      text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Sikyop Monitoring Dashboard</h1>
    <div class="row">
      <div class="col-md-4">
        <div class="card text-center shadow-sm">
          <div class="card-body">
            <h5 class="card-title">PIR Sensor Count</h5>
            <p class="card-text display-4" id="pirCount">0</p>
            <button class="btn btn-danger" id="clearButton" onclick="clearPIR()">Clear Count</button>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card text-center shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Rain Status</h5>
            <p class="card-text display-4" id="rainStatus">No Data</p>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card text-center shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Water Level</h5>
            <p class="card-text display-4" id="waterLevelStatus">No Data</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <footer>
    <p id="dateTime">Loading Date and Time...</p>
  </footer>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function fetchData(){
      fetch('/data')
        .then(response => response.json())
        .then(data => {
          document.getElementById('pirCount').innerHTML = data.pirCount;
          document.getElementById('rainStatus').innerHTML = data.rainStatus;
          document.getElementById('waterLevelStatus').innerHTML = data.waterLevelStatus;
        });
    }

    function clearPIR(){
      fetch('/clear_pir')
        .then(response => {
          if(response.ok){
            document.getElementById('pirCount').innerHTML = 0;
          }
        });
    }

    function fetchDateTime(){
      fetch('/datetime')
        .then(response => response.text())
        .then(data => {
          document.getElementById('dateTime').innerHTML = data;
        });
    }

    setInterval(fetchData, 2000);
    setInterval(fetchDateTime, 1000);
    window.onload = function(){
      fetchData();
      fetchDateTime();
    };
  </script>
</body>
</html>
)rawliteral";

void handleRoot() {
  server.send(200, "text/html", htmlPage);
}

void handleData() {
  String json = "{";
  json += "\"pirCount\":" + String(pirCount) + ",";  
  json += "\"rainStatus\":\"" + rainStatus + "\",";
  json += "\"waterLevelStatus\":\"" + waterLevelStatus + "\"";
  json += "}";
  server.send(200, "application/json", json);
}

void handleClearPIR() {
  pirCount = 0;
  server.send(200, "text/plain", "PIR Count Cleared");
}

void handleDateTime(){
  time_t now;
  struct tm timeinfo;
  char timeString[30];

  time(&now);
  localtime_r(&now, &timeinfo);

  strftime(timeString, sizeof(timeString), "%Y-%m-%d %H:%M:%S", &timeinfo);
  server.send(200, "text/plain", timeString);
}

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  const char* ssid = "Cayson24";     
  const char* password = "brokendoors123"; 
  WiFi.begin(ssid, password);

  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println();
  Serial.println("Connected to WiFi");
  Serial.print("ESP32 IP address: ");
  Serial.println(WiFi.localIP());

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  esp_now_register_recv_cb(OnDataRecv);

  server.on("/", HTTP_GET, handleRoot);
  server.on("/data", HTTP_GET, handleData);
  server.on("/clear_pir", HTTP_GET, handleClearPIR);
  server.on("/datetime", HTTP_GET, handleDateTime);

  server.begin();
  Serial.println("HTTP Server started");
}

void loop() {
  server.handleClient();
}
